// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Subscription {
  FREE
  BASIC
  PREMIUM
}

model User {
  id                      String               @id @default(cuid())
  name                    String?
  email                   String?              @unique
  emailVerified           DateTime?            @map("email_verified")
  image                   String?
  password                String?
  accounts                Account[]
  organizations           Organization[]       @relation("OrganizationOwner") // Organizations the user owns
  organizationMemberships OrganizationMember[] // Organizations the user is a member of

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Organization {
  id           String               @id @default(cuid())
  logo         String?
  name         String
  slug         String?              @unique
  subscription Subscription         @default(FREE)
  ownerId      String               @map("owner_id")
  owner        User                 @relation("OrganizationOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members      OrganizationMember[]
  companies    Company[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Company {
  id             String       @id @default(cuid())
  name           String
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("companies")
}
